class _PixelColorReaderState extends State<PixelColorReader> {
  Uint8List? _imageBytes;
  ImagePixels? _imagePixels;
  Color? _centerPixelColor;

  @override
  void initState() {
    super.initState();
    _loadImageBytes().then((bytes) {
      _imageBytes = bytes;
      setState(() {
        _imagePixels = ImagePixels(img.decodeImage(_imageBytes));
        _centerPixelColor = _readCenterPixelColor();
      });
    });
  }

  Future<Uint8List> _loadImageBytes() async {
    // Load the image from network or local file
    Image.asset("");

    return _loadImageBytes();
  }

  //reading the center pixel color by taking the screen size
  Color _readCenterPixelColor() {
    final screenSize = MediaQuery.of(context).size;
    final centerPixelX = screenSize.width ~/ 2;
    final centerPixelY = screenSize.height ~/ 2;
    final centerPixelIndex = centerPixelY * _imagePixels.width + centerPixelX;
    final centerPixel = _imagePixels.getPixel(centerPixelIndex);
    return Color.fromARGB(centerPixel.alpha, centerPixel.red, centerPixel.green,
        centerPixel.blue);
  }

  int centerPixelColor() {
    final screenSize = MediaQuery.of(context).size;
    final centerPixelX = screenSize.width ~/2;
    final centerPixelY = screenSize.height ~/2;
    

    
  }
  

  @override
  Widget build(BuildContext context) {
    if (_imageBytes == null || _imagePixels == null) {
      return Container();
    }
    return ImagePixels(
        imageProvider: , 
        builder: (context, img) => 
        Text("Pixel Color is: ${img.pixelColorAt!()}");
        );
  }
}



// return Center(
//       child: Text(
//         "Center Pixel Color: $_centerPixelColor",
//         style: TextStyle(fontSize: 20),
//       ),
//     );